leetcode #121
简单动态规划思路
res[i][1] = Math.max(res[i-1][1],-prices[i])用于满足只能交易一次的限制
class Solution {
    public int maxProfit(int[] prices) {
        if(prices == null){
            return 0;
        }
        int len = prices.length;
        if(len == 0){
            return 0;
        }
        int[][] res = new int[len][2];
        res[0][0] = 0;
        res[0][1] = -prices[0];
        for(int i=1;i<len;i++){
            res[i][0] = Math.max(res[i-1][0],res[i-1][1] + prices[i]);
            res[i][1] = Math.max(res[i-1][1],-prices[i]); 
        }
        return res[len-1][0];
    }
}


leetcode #547
转换为无向图连通分量问题，每个人和人间的关系形成一个无向图，每一个朋友圈都是一个连通分量
class Solution {
    public int findCircleNum(int[][] M) {
        if(M == null || M.length == 0 || M[0].length == 0){
            return 0;
        }
        int len = M.length;
        boolean[] visited = new boolean[len];
        int ans = 0;
        for(int i=0;i<len;i++){
            if(visited[i]){
                continue;
            }
            ans++;
            dfs(visited,i,M);
        }
        return ans;
    }
    public void dfs(boolean[] visited,int i,int[][] M){
        for(int j=0;j<M.length;j++){
            if(M[i][j] == 1 && !visited[j]){
                visited[j] = true;
                dfs(visited,j,M);
            }
        }
    }
}
