//leetcode 463
//dfs遍历，以一块陆地为起点，遍历完整个岛屿，每次从陆地遍历到水域或边界时，周长都加1
class Solution {
    public int islandPerimeter(int[][] grid) {
        int res = 0;
        if(grid.length == 0 || grid[0].length == 0){
            return res;
        }
        for(int i=0;i<grid.length;i++){
            for(int j=0;j<grid[0].length;j++){
                if(grid[i][j] == 1){
                    res = dfs(grid,i,j);
                    break;
                }
            }
        }
        return res;
    }
    int dfs(int[][] grid,int i,int j){
        if(!(i>=0 && i<grid.length && j>=0 && j<grid[0].length)){
            return 1;
        }
        if(grid[i][j] == 0){
            return 1;
        }
        if(grid[i][j] == 2){
            return 0;
        }
        if(grid[i][j] == 1){
            grid[i][j]++;
        }
        return dfs(grid,i-1,j) + dfs(grid,i+1,j) + dfs(grid,i,j-1) + dfs(grid,i,j+1);
    }
}


//leetcode 701
遍历解法，尝试插入到root的左子树或右子树，当root的左子树或右子树为null时，则成功插入
class Solution {
    public TreeNode insertIntoBST(TreeNode root, int val) {
        //定义一个指针用来遍历，保持root对树根部的指针，方便返回
        TreeNode cur = root;
        while(cur != null){
            //插入左子树
            if(cur.val > val){
                if(cur.left == null){
                    cur.left = new TreeNode(val);
                    return root;
                }else{
                    cur = cur.left;
                }
            //插入右子树
            }else if(cur.val < val){
                if(cur.right == null){
                    cur.right = new TreeNode(val);
                    return root;
                }else{
                    cur = cur.right;
                }
            }
        }
        //树本来就是空的，则返回一个只包含val值的节点
        return new TreeNode(val);

        
    }
}
